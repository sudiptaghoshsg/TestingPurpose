import json
from typing import Optional

from src.nlu_processor import NLUResult, HealthIntent, SarvamAPIClient
from src.prompts import HEALTHCARE_SYSTEM_PROMPT

class HealHubResponseGenerator:
    def __init__(self, api_key: Optional[str] = None):
        self.sarvam_client = SarvamAPIClient(api_key=api_key)

    def _get_hardcoded_safety_response(self, nlu_result: NLUResult) -> Optional[str]:
        """
        Provides immediate hardcoded responses for critical safety scenarios
        based on NLU output.
        """
        # Determine language for response (simplified, assumes NLU provides it or defaults)
        lang = nlu_result.language_detected.split('-')[0] if nlu_result.language_detected else "en"

        if nlu_result.is_emergency:
            if lang == "hi":
                return "‡§Ü‡§™‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§¨‡§§‡§æ‡§è ‡§ó‡§è ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§≤‡§ó ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§á‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ú‡§æ‡§è‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§∏‡§ú‡•ç‡§ú‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§"
            else: # Default to English
                return "The symptoms you're describing sound serious and may require immediate medical attention. Please consult a doctor or go to the nearest hospital right away. I am not equipped to provide emergency medical assistance."

        if nlu_result.intent == HealthIntent.DIAGNOSIS_REQUEST:
            if lang == "hi":
                return "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù‡§§‡§æ/‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å ‡§ï‡§ø ‡§Ü‡§™ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¢‡•Ç‡§Ç‡§¢ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•à‡§Ç ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§®‡§ø‡§¶‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ/‡§∏‡§ï‡§§‡•Ä‡•§ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§Ø‡§æ ‡§®‡§ø‡§¶‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
            else: # Default to English
                return "I understand you're looking for answers, but I cannot provide a medical diagnosis. For any health concerns or to get a diagnosis, it's very important to consult a qualified healthcare professional."

        if nlu_result.intent == HealthIntent.MEDICATION_INFO and "advice" in nlu_result.original_text.lower(): # Simple check
             # More robust check for treatment/medication advice needed in NLU
            if lang == "hi":
                return "‡§Æ‡•à‡§Ç ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡§≤‡§æ‡§π ‡§Ø‡§æ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§∏‡•Å‡§ù‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§• ‡§π‡•Ç‡§Å‡•§ ‡§â‡§™‡§ö‡§æ‡§∞, ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§ï ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
            else: # Default to English
                return "I am unable to offer treatment advice or suggest specific medications. Please consult with your doctor or a qualified healthcare provider for any questions about treatments, medications, or managing your health condition."
        return None

    def generate_response(self, user_query: str, nlu_result: NLUResult) -> str:
        """
        Generates a response based on the user query and NLU result.
        Applies a two-layer safety check.
        """
        # Layer 1: Application-level hardcoded safety responses
        safety_response = self._get_hardcoded_safety_response(nlu_result)
        if safety_response:
            print("‚ÑπÔ∏è Applying hardcoded safety response.")
            return safety_response

        # Layer 2: LLM-level response generation with comprehensive system prompt
        print(f"üí¨ Generating response for query: '{user_query}' using LLM.")
        
        # Construct messages for the LLM
        # The NLU result can be passed to the LLM for more context if needed,
        # but the system prompt already guides it extensively.
        # For now, we'll just pass the user query.
        # You could enhance this by adding a summary of NLU findings to the user message.
        messages = [
            {"role": "system", "content": HEALTHCARE_SYSTEM_PROMPT},
            {"role": "user", "content": f"User query: \"{user_query}\"\nDetected language: {nlu_result.language_detected}\nNLU Intent: {nlu_result.intent.value}\nNLU Entities: {[e.text for e in nlu_result.entities]}"}
        ]

        try:
            llm_response_data = self.sarvam_client.chat_completion(
                messages=messages,
                temperature=0.5, # Adjust for desired creativity/factuality
                max_tokens=500  # Adjust as needed
            )

            if llm_response_data and "choices" in llm_response_data and llm_response_data["choices"]:
                generated_text = llm_response_data["choices"][0]["message"]["content"]
                # The system prompt instructs the LLM to include disclaimers.
                return generated_text.strip()
            else:
                print("‚ö†Ô∏è LLM response was empty or malformed.")
                # Fallback response if LLM fails
                if nlu_result.language_detected.startswith("hi"):
                    return "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
                return "Sorry, I am unable to assist you at the moment. Please try again later."

        except Exception as e:
            print(f"‚ùå Error during LLM call: {e}")
            if nlu_result.language_detected.startswith("hi"):
                return "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§"
            return "Sorry, an error occurred while generating the response."
